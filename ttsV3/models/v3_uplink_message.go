// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3UplinkMessage Uplink message from the end device to the network
//
// swagger:model v3UplinkMessage
type V3UplinkMessage struct {

	// correlation ids
	CorrelationIds []string `json:"correlation_ids"`

	// Index of the device channel that received the message.
	// Set by Network Server.
	DeviceChannelIndex int64 `json:"device_channel_index,omitempty"`

	// payload
	Payload *Lorawanv3Message `json:"payload,omitempty"`

	// raw payload
	// Format: byte
	RawPayload strfmt.Base64 `json:"raw_payload,omitempty"`

	// Server time when a component received the message.
	// The Gateway Server and Network Server set this value to their local server time of reception.
	// Format: date-time
	ReceivedAt strfmt.DateTime `json:"received_at,omitempty"`

	// rx metadata
	RxMetadata []*V3RxMetadata `json:"rx_metadata"`

	// settings
	Settings *V3TxSettings `json:"settings,omitempty"`
}

// Validate validates this v3 uplink message
func (m *V3UplinkMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3UplinkMessage) validatePayload(formats strfmt.Registry) error {

	if swag.IsZero(m.Payload) { // not required
		return nil
	}

	if m.Payload != nil {
		if err := m.Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payload")
			}
			return err
		}
	}

	return nil
}

func (m *V3UplinkMessage) validateReceivedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("received_at", "body", "date-time", m.ReceivedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3UplinkMessage) validateRxMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.RxMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.RxMetadata); i++ {
		if swag.IsZero(m.RxMetadata[i]) { // not required
			continue
		}

		if m.RxMetadata[i] != nil {
			if err := m.RxMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rx_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3UplinkMessage) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3UplinkMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3UplinkMessage) UnmarshalBinary(b []byte) error {
	var res V3UplinkMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
