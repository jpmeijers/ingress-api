// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3ProvisionEndDevicesRequest v3 provision end devices request
//
// swagger:model v3ProvisionEndDevicesRequest
type V3ProvisionEndDevicesRequest struct {

	// application ids
	ApplicationIds *V3ApplicationIdentifiers `json:"application_ids,omitempty"`

	// Provision devices with identifiers from the given data.
	// The device_id and dev_eui will be generated by the provisioner from the vendor-specific data.
	FromData *ProvisionEndDevicesRequestIdentifiersFromData `json:"from_data,omitempty"`

	// List of device identifiers that will be provisioned.
	// The device identifiers must contain device_id and dev_eui.
	// If set, the application_ids must equal the provision request's application_ids.
	// The number of entries in data must match the number of given identifiers.
	List *ProvisionEndDevicesRequestIdentifiersList `json:"list,omitempty"`

	// ID of the provisioner service as configured in the Join Server.
	ProvisionerID string `json:"provisioner_id,omitempty"`

	// Vendor-specific provisioning data.
	// Format: byte
	ProvisioningData strfmt.Base64 `json:"provisioning_data,omitempty"`

	// Provision devices in a range.
	// The device_id will be generated by the provisioner from the vendor-specific data.
	// The dev_eui will be issued from the given start_dev_eui.
	Range *ProvisionEndDevicesRequestIdentifiersRange `json:"range,omitempty"`
}

// Validate validates this v3 provision end devices request
func (m *V3ProvisionEndDevicesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ProvisionEndDevicesRequest) validateApplicationIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationIds) { // not required
		return nil
	}

	if m.ApplicationIds != nil {
		if err := m.ApplicationIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_ids")
			}
			return err
		}
	}

	return nil
}

func (m *V3ProvisionEndDevicesRequest) validateFromData(formats strfmt.Registry) error {

	if swag.IsZero(m.FromData) { // not required
		return nil
	}

	if m.FromData != nil {
		if err := m.FromData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from_data")
			}
			return err
		}
	}

	return nil
}

func (m *V3ProvisionEndDevicesRequest) validateList(formats strfmt.Registry) error {

	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *V3ProvisionEndDevicesRequest) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ProvisionEndDevicesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ProvisionEndDevicesRequest) UnmarshalBinary(b []byte) error {
	var res V3ProvisionEndDevicesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
