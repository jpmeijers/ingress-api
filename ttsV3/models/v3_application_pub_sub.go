// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3ApplicationPubSub v3 application pub sub
//
// swagger:model v3ApplicationPubSub
type V3ApplicationPubSub struct {

	// Base topic name to which the messages topic is appended.
	BaseTopic string `json:"base_topic,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// downlink ack
	DownlinkAck *V3ApplicationPubSubMessage `json:"downlink_ack,omitempty"`

	// downlink failed
	DownlinkFailed *V3ApplicationPubSubMessage `json:"downlink_failed,omitempty"`

	// downlink nack
	DownlinkNack *V3ApplicationPubSubMessage `json:"downlink_nack,omitempty"`

	// The topic to which the Application Server subscribes for downlink queue push operations.
	DownlinkPush *V3ApplicationPubSubMessage `json:"downlink_push,omitempty"`

	// downlink queued
	DownlinkQueued *V3ApplicationPubSubMessage `json:"downlink_queued,omitempty"`

	// The topic to which the Application Server subscribes for downlink queue replace operations.
	DownlinkReplace *V3ApplicationPubSubMessage `json:"downlink_replace,omitempty"`

	// downlink sent
	DownlinkSent *V3ApplicationPubSubMessage `json:"downlink_sent,omitempty"`

	// The format to use for the body.
	// Supported values depend on the Application Server configuration.
	Format string `json:"format,omitempty"`

	// ids
	Ids *V3ApplicationPubSubIdentifiers `json:"ids,omitempty"`

	// join accept
	JoinAccept *V3ApplicationPubSubMessage `json:"join_accept,omitempty"`

	// location solved
	LocationSolved *V3ApplicationPubSubMessage `json:"location_solved,omitempty"`

	// mqtt
	Mqtt *ApplicationPubSubMQTTProvider `json:"mqtt,omitempty"`

	// nats
	Nats *ApplicationPubSubNATSProvider `json:"nats,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// uplink message
	UplinkMessage *V3ApplicationPubSubMessage `json:"uplink_message,omitempty"`
}

// Validate validates this v3 application pub sub
func (m *V3ApplicationPubSub) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkAck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkNack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkPush(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkQueued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkReplace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinAccept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationSolved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMqtt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplinkMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ApplicationPubSub) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3ApplicationPubSub) validateDownlinkAck(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkAck) { // not required
		return nil
	}

	if m.DownlinkAck != nil {
		if err := m.DownlinkAck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_ack")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateDownlinkFailed(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkFailed) { // not required
		return nil
	}

	if m.DownlinkFailed != nil {
		if err := m.DownlinkFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_failed")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateDownlinkNack(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkNack) { // not required
		return nil
	}

	if m.DownlinkNack != nil {
		if err := m.DownlinkNack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_nack")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateDownlinkPush(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkPush) { // not required
		return nil
	}

	if m.DownlinkPush != nil {
		if err := m.DownlinkPush.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_push")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateDownlinkQueued(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkQueued) { // not required
		return nil
	}

	if m.DownlinkQueued != nil {
		if err := m.DownlinkQueued.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_queued")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateDownlinkReplace(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkReplace) { // not required
		return nil
	}

	if m.DownlinkReplace != nil {
		if err := m.DownlinkReplace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_replace")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateDownlinkSent(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkSent) { // not required
		return nil
	}

	if m.DownlinkSent != nil {
		if err := m.DownlinkSent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_sent")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if m.Ids != nil {
		if err := m.Ids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ids")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateJoinAccept(formats strfmt.Registry) error {

	if swag.IsZero(m.JoinAccept) { // not required
		return nil
	}

	if m.JoinAccept != nil {
		if err := m.JoinAccept.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("join_accept")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateLocationSolved(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationSolved) { // not required
		return nil
	}

	if m.LocationSolved != nil {
		if err := m.LocationSolved.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location_solved")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateMqtt(formats strfmt.Registry) error {

	if swag.IsZero(m.Mqtt) { // not required
		return nil
	}

	if m.Mqtt != nil {
		if err := m.Mqtt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mqtt")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateNats(formats strfmt.Registry) error {

	if swag.IsZero(m.Nats) { // not required
		return nil
	}

	if m.Nats != nil {
		if err := m.Nats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nats")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationPubSub) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3ApplicationPubSub) validateUplinkMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.UplinkMessage) { // not required
		return nil
	}

	if m.UplinkMessage != nil {
		if err := m.UplinkMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uplink_message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ApplicationPubSub) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ApplicationPubSub) UnmarshalBinary(b []byte) error {
	var res V3ApplicationPubSub
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
