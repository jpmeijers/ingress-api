// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MACCommandADRParamSetupReq m a c command a d r param setup req
//
// swagger:model MACCommandADRParamSetupReq
type MACCommandADRParamSetupReq struct {

	// Exponent e that configures the ADR_ACK_DELAY = 2^e messages.
	AdrAckDelayExponent V3ADRAckDelayExponent `json:"adr_ack_delay_exponent,omitempty"`

	// Exponent e that configures the ADR_ACK_LIMIT = 2^e messages.
	AdrAckLimitExponent V3ADRAckLimitExponent `json:"adr_ack_limit_exponent,omitempty"`
}

// Validate validates this m a c command a d r param setup req
func (m *MACCommandADRParamSetupReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdrAckDelayExponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdrAckLimitExponent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MACCommandADRParamSetupReq) validateAdrAckDelayExponent(formats strfmt.Registry) error {

	if swag.IsZero(m.AdrAckDelayExponent) { // not required
		return nil
	}

	if err := m.AdrAckDelayExponent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("adr_ack_delay_exponent")
		}
		return err
	}

	return nil
}

func (m *MACCommandADRParamSetupReq) validateAdrAckLimitExponent(formats strfmt.Registry) error {

	if swag.IsZero(m.AdrAckLimitExponent) { // not required
		return nil
	}

	if err := m.AdrAckLimitExponent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("adr_ack_limit_exponent")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MACCommandADRParamSetupReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MACCommandADRParamSetupReq) UnmarshalBinary(b []byte) error {
	var res MACCommandADRParamSetupReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
