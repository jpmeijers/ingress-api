// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3Client An OAuth client on the network.
//
// swagger:model v3Client
type V3Client struct {

	// attributes
	Attributes map[string]string `json:"attributes,omitempty"`

	// contact info
	ContactInfo []*V3ContactInfo `json:"contact_info"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// If set, the authorization page will show endorsement.
	// This field can only be modified by admins.
	Endorsed bool `json:"endorsed,omitempty"`

	// OAuth flows that can be used for the client to get a token.
	// After a client is created, this field can only be modified by admins.
	Grants []V3GrantType `json:"grants"`

	// ids
	Ids *V3ClientIdentifiers `json:"ids,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The allowed redirect URIs against which authorization requests are checked.
	// If the authorization request does not pass a redirect URI, the first one
	// from this list is taken.
	RedirectUris []string `json:"redirect_uris"`

	// Rights denotes what rights the client will have access to.
	// Users that previously authorized this client will have to re-authorize the
	// client after rights are added to this list.
	Rights []V3Right `json:"rights"`

	// The client secret is only visible to collaborators of the client.
	Secret string `json:"secret,omitempty"`

	// If set, the authorization page will be skipped.
	// This field can only be modified by admins.
	SkipAuthorization bool `json:"skip_authorization,omitempty"`

	// The reviewing state of the client.
	// This field can only be modified by admins.
	State V3State `json:"state,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this v3 client
func (m *V3Client) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRights(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Client) validateContactInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ContactInfo); i++ {
		if swag.IsZero(m.ContactInfo[i]) { // not required
			continue
		}

		if m.ContactInfo[i] != nil {
			if err := m.ContactInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contact_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Client) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3Client) validateGrants(formats strfmt.Registry) error {

	if swag.IsZero(m.Grants) { // not required
		return nil
	}

	for i := 0; i < len(m.Grants); i++ {

		if err := m.Grants[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grants" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V3Client) validateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if m.Ids != nil {
		if err := m.Ids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ids")
			}
			return err
		}
	}

	return nil
}

func (m *V3Client) validateRights(formats strfmt.Registry) error {

	if swag.IsZero(m.Rights) { // not required
		return nil
	}

	for i := 0; i < len(m.Rights); i++ {

		if err := m.Rights[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rights" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V3Client) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *V3Client) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3Client) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3Client) UnmarshalBinary(b []byte) error {
	var res V3Client
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
