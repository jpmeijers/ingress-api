// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3JoinAcceptPayload v3 join accept payload
//
// swagger:model v3JoinAcceptPayload
type V3JoinAcceptPayload struct {

	// cf list
	CfList *V3CFList `json:"cf_list,omitempty"`

	// dev addr
	// Format: byte
	DevAddr strfmt.Base64 `json:"dev_addr,omitempty"`

	// dl settings
	DlSettings *V3DLSettings `json:"dl_settings,omitempty"`

	// encrypted
	// Format: byte
	Encrypted strfmt.Base64 `json:"encrypted,omitempty"`

	// join nonce
	// Format: byte
	JoinNonce strfmt.Base64 `json:"join_nonce,omitempty"`

	// net id
	// Format: byte
	NetID strfmt.Base64 `json:"net_id,omitempty"`

	// rx delay
	RxDelay V3RxDelay `json:"rx_delay,omitempty"`
}

// Validate validates this v3 join accept payload
func (m *V3JoinAcceptPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCfList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxDelay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JoinAcceptPayload) validateCfList(formats strfmt.Registry) error {

	if swag.IsZero(m.CfList) { // not required
		return nil
	}

	if m.CfList != nil {
		if err := m.CfList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cf_list")
			}
			return err
		}
	}

	return nil
}

func (m *V3JoinAcceptPayload) validateDlSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.DlSettings) { // not required
		return nil
	}

	if m.DlSettings != nil {
		if err := m.DlSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dl_settings")
			}
			return err
		}
	}

	return nil
}

func (m *V3JoinAcceptPayload) validateRxDelay(formats strfmt.Registry) error {

	if swag.IsZero(m.RxDelay) { // not required
		return nil
	}

	if err := m.RxDelay.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rx_delay")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3JoinAcceptPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3JoinAcceptPayload) UnmarshalBinary(b []byte) error {
	var res V3JoinAcceptPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
