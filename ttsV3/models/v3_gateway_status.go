// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3GatewayStatus v3 gateway status
//
// swagger:model v3GatewayStatus
type V3GatewayStatus struct {

	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced interface{} `json:"advanced,omitempty"`

	// Location of each gateway's antenna
	// - if left out, server uses registry-set location as fallback
	AntennaLocations []*Lorawanv3Location `json:"antenna_locations"`

	// Boot time of the gateway
	// - can be left out to save bandwidth; old value will be kept
	// Format: date-time
	BootTime strfmt.DateTime `json:"boot_time,omitempty"`

	// IP addresses of this gateway.
	// Repeated addresses can be used to communicate addresses of multiple interfaces (LAN, Public IP, ...).
	IP []string `json:"ip"`

	// Metrics
	// - can be used for forwarding gateway metrics such as temperatures or performance metrics
	// - map keys are written in snake_case
	Metrics map[string]float32 `json:"metrics,omitempty"`

	// Current time of the gateway
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// Versions of gateway subsystems
	// - each field can be left out to save bandwidth; old value will be kept
	// - map keys are written in snake_case
	// - for example:
	//     firmware: "2.0.4"
	//     forwarder: "v2-3.3.1"
	//     fpga: "48"
	//     dsp: "27"
	//     hal: "v2-3.5.0"
	Versions map[string]string `json:"versions,omitempty"`
}

// Validate validates this v3 gateway status
func (m *V3GatewayStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAntennaLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3GatewayStatus) validateAntennaLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.AntennaLocations) { // not required
		return nil
	}

	for i := 0; i < len(m.AntennaLocations); i++ {
		if swag.IsZero(m.AntennaLocations[i]) { // not required
			continue
		}

		if m.AntennaLocations[i] != nil {
			if err := m.AntennaLocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("antenna_locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3GatewayStatus) validateBootTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BootTime) { // not required
		return nil
	}

	if err := validate.FormatOf("boot_time", "body", "date-time", m.BootTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3GatewayStatus) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3GatewayStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3GatewayStatus) UnmarshalBinary(b []byte) error {
	var res V3GatewayStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
