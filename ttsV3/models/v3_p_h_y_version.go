// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V3PHYVersion v3 p h y version
//
// swagger:model v3PHYVersion
type V3PHYVersion string

const (

	// V3PHYVersionPHYUNKNOWN captures enum value "PHY_UNKNOWN"
	V3PHYVersionPHYUNKNOWN V3PHYVersion = "PHY_UNKNOWN"

	// V3PHYVersionPHYV10 captures enum value "PHY_V1_0"
	V3PHYVersionPHYV10 V3PHYVersion = "PHY_V1_0"

	// V3PHYVersionPHYV101 captures enum value "PHY_V1_0_1"
	V3PHYVersionPHYV101 V3PHYVersion = "PHY_V1_0_1"

	// V3PHYVersionPHYV102REVA captures enum value "PHY_V1_0_2_REV_A"
	V3PHYVersionPHYV102REVA V3PHYVersion = "PHY_V1_0_2_REV_A"

	// V3PHYVersionPHYV102REVB captures enum value "PHY_V1_0_2_REV_B"
	V3PHYVersionPHYV102REVB V3PHYVersion = "PHY_V1_0_2_REV_B"

	// V3PHYVersionPHYV11REVA captures enum value "PHY_V1_1_REV_A"
	V3PHYVersionPHYV11REVA V3PHYVersion = "PHY_V1_1_REV_A"

	// V3PHYVersionPHYV11REVB captures enum value "PHY_V1_1_REV_B"
	V3PHYVersionPHYV11REVB V3PHYVersion = "PHY_V1_1_REV_B"

	// V3PHYVersionPHYV103REVA captures enum value "PHY_V1_0_3_REV_A"
	V3PHYVersionPHYV103REVA V3PHYVersion = "PHY_V1_0_3_REV_A"
)

// for schema
var v3PHYVersionEnum []interface{}

func init() {
	var res []V3PHYVersion
	if err := json.Unmarshal([]byte(`["PHY_UNKNOWN","PHY_V1_0","PHY_V1_0_1","PHY_V1_0_2_REV_A","PHY_V1_0_2_REV_B","PHY_V1_1_REV_A","PHY_V1_1_REV_B","PHY_V1_0_3_REV_A"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3PHYVersionEnum = append(v3PHYVersionEnum, v)
	}
}

func (m V3PHYVersion) validateV3PHYVersionEnum(path, location string, value V3PHYVersion) error {
	if err := validate.Enum(path, location, value, v3PHYVersionEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v3 p h y version
func (m V3PHYVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV3PHYVersionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
