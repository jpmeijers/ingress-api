// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3MACState MACState represents the state of MAC layer of the device.
// MACState is reset on each join for OTAA or ResetInd for ABP devices.
// This is used internally by the Network Server and is read only.
//
// swagger:model v3MACState
type V3MACState struct {

	// Current LoRaWAN MAC parameters.
	CurrentParameters *V3MACParameters `json:"current_parameters,omitempty"`

	// Desired LoRaWAN MAC parameters.
	DesiredParameters *V3MACParameters `json:"desired_parameters,omitempty"`

	// Currently active LoRaWAN device class
	// - Device class is A by default
	// - If device sets ClassB bit in uplink, this will be set to B
	// - If device sent DeviceModeInd MAC message, this will be set to that value
	DeviceClass V3Class `json:"device_class,omitempty"`

	// Time when the last confirmed downlink message or MAC command was scheduled.
	// Format: date-time
	LastConfirmedDownlinkAt strfmt.DateTime `json:"last_confirmed_downlink_at,omitempty"`

	// Frame counter value of last uplink containing DevStatusAns.
	LastDevStatusfCntUp int64 `json:"last_dev_status_f_cnt_up,omitempty"`

	// Time when the last network-initiated downlink message was scheduled.
	// Format: date-time
	LastNetworkInitiatedDownlinkAt strfmt.DateTime `json:"last_network_initiated_downlink_at,omitempty"`

	// LoRaWAN MAC version.
	LorawanVersion V3MACVersion `json:"lorawan_version,omitempty"`

	// A confirmed application downlink, for which an acknowledgment is expected to arrive.
	PendingApplicationDownlink *V3ApplicationDownlink `json:"pending_application_downlink,omitempty"`

	// Pending join request.
	// Set each time a join accept is scheduled and removed each time an uplink is received from the device.
	PendingJoinRequest *V3JoinRequest `json:"pending_join_request,omitempty"`

	// Pending MAC requests(i.e. sent requests, for which no response has been received yet).
	// Regenerated on each downlink.
	PendingRequests []*V3MACCommand `json:"pending_requests"`

	// Periodicity of the class B ping slot.
	PingSlotPeriodicity *V3PingSlotPeriodValue `json:"ping_slot_periodicity,omitempty"`

	// Queued join-accept.
	// Set each time a (re-)join request accept is received from Join Server and removed each time a downlink is scheduled.
	QueuedJoinAccept *MACStateJoinAccept `json:"queued_join_accept,omitempty"`

	// Queued MAC responses.
	// Regenerated on each uplink.
	QueuedResponses []*V3MACCommand `json:"queued_responses"`

	// Recent data downlink messages sorted by time.
	// The number of messages stored may depend on configuration.
	RecentDownlinks []*V3DownlinkMessage `json:"recent_downlinks"`

	// Recent data uplink messages sorted by time.
	// The number of messages stored may depend on configuration.
	RecentUplinks []*V3UplinkMessage `json:"recent_uplinks"`

	// Whether or not Rx windows are expected to be open.
	// Set to true every time an uplink is received.
	// Set to false every time a successful downlink scheduling attempt is made.
	RxWindowsAvailable bool `json:"rx_windows_available,omitempty"`
}

// Validate validates this v3 m a c state
func (m *V3MACState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastConfirmedDownlinkAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastNetworkInitiatedDownlinkAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLorawanVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingApplicationDownlink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingJoinRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingSlotPeriodicity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedJoinAccept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecentDownlinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecentUplinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3MACState) validateCurrentParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentParameters) { // not required
		return nil
	}

	if m.CurrentParameters != nil {
		if err := m.CurrentParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_parameters")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACState) validateDesiredParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.DesiredParameters) { // not required
		return nil
	}

	if m.DesiredParameters != nil {
		if err := m.DesiredParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("desired_parameters")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACState) validateDeviceClass(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceClass) { // not required
		return nil
	}

	if err := m.DeviceClass.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("device_class")
		}
		return err
	}

	return nil
}

func (m *V3MACState) validateLastConfirmedDownlinkAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastConfirmedDownlinkAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_confirmed_downlink_at", "body", "date-time", m.LastConfirmedDownlinkAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3MACState) validateLastNetworkInitiatedDownlinkAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastNetworkInitiatedDownlinkAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_network_initiated_downlink_at", "body", "date-time", m.LastNetworkInitiatedDownlinkAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3MACState) validateLorawanVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.LorawanVersion) { // not required
		return nil
	}

	if err := m.LorawanVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lorawan_version")
		}
		return err
	}

	return nil
}

func (m *V3MACState) validatePendingApplicationDownlink(formats strfmt.Registry) error {

	if swag.IsZero(m.PendingApplicationDownlink) { // not required
		return nil
	}

	if m.PendingApplicationDownlink != nil {
		if err := m.PendingApplicationDownlink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pending_application_downlink")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACState) validatePendingJoinRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.PendingJoinRequest) { // not required
		return nil
	}

	if m.PendingJoinRequest != nil {
		if err := m.PendingJoinRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pending_join_request")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACState) validatePendingRequests(formats strfmt.Registry) error {

	if swag.IsZero(m.PendingRequests) { // not required
		return nil
	}

	for i := 0; i < len(m.PendingRequests); i++ {
		if swag.IsZero(m.PendingRequests[i]) { // not required
			continue
		}

		if m.PendingRequests[i] != nil {
			if err := m.PendingRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pending_requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3MACState) validatePingSlotPeriodicity(formats strfmt.Registry) error {

	if swag.IsZero(m.PingSlotPeriodicity) { // not required
		return nil
	}

	if m.PingSlotPeriodicity != nil {
		if err := m.PingSlotPeriodicity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ping_slot_periodicity")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACState) validateQueuedJoinAccept(formats strfmt.Registry) error {

	if swag.IsZero(m.QueuedJoinAccept) { // not required
		return nil
	}

	if m.QueuedJoinAccept != nil {
		if err := m.QueuedJoinAccept.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queued_join_accept")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACState) validateQueuedResponses(formats strfmt.Registry) error {

	if swag.IsZero(m.QueuedResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.QueuedResponses); i++ {
		if swag.IsZero(m.QueuedResponses[i]) { // not required
			continue
		}

		if m.QueuedResponses[i] != nil {
			if err := m.QueuedResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queued_responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3MACState) validateRecentDownlinks(formats strfmt.Registry) error {

	if swag.IsZero(m.RecentDownlinks) { // not required
		return nil
	}

	for i := 0; i < len(m.RecentDownlinks); i++ {
		if swag.IsZero(m.RecentDownlinks[i]) { // not required
			continue
		}

		if m.RecentDownlinks[i] != nil {
			if err := m.RecentDownlinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recent_downlinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3MACState) validateRecentUplinks(formats strfmt.Registry) error {

	if swag.IsZero(m.RecentUplinks) { // not required
		return nil
	}

	for i := 0; i < len(m.RecentUplinks); i++ {
		if swag.IsZero(m.RecentUplinks[i]) { // not required
			continue
		}

		if m.RecentUplinks[i] != nil {
			if err := m.RecentUplinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recent_uplinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3MACState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3MACState) UnmarshalBinary(b []byte) error {
	var res V3MACState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
