// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3ConcentratorConfig v3 concentrator config
//
// swagger:model v3ConcentratorConfig
type V3ConcentratorConfig struct {

	// channels
	Channels []*V3ConcentratorConfigChannel `json:"channels"`

	// clock source
	ClockSource int64 `json:"clock_source,omitempty"`

	// fsk channel
	FskChannel *ConcentratorConfigFSKChannel `json:"fsk_channel,omitempty"`

	// lbt
	Lbt *ConcentratorConfigLBTConfiguration `json:"lbt,omitempty"`

	// lora standard channel
	LoraStandardChannel *ConcentratorConfigLoRaStandardChannel `json:"lora_standard_channel,omitempty"`

	// ping slot
	PingSlot *V3ConcentratorConfigChannel `json:"ping_slot,omitempty"`

	// radios
	Radios []*V3GatewayRadio `json:"radios"`
}

// Validate validates this v3 concentrator config
func (m *V3ConcentratorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFskChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLbt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoraStandardChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadios(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ConcentratorConfig) validateChannels(formats strfmt.Registry) error {

	if swag.IsZero(m.Channels) { // not required
		return nil
	}

	for i := 0; i < len(m.Channels); i++ {
		if swag.IsZero(m.Channels[i]) { // not required
			continue
		}

		if m.Channels[i] != nil {
			if err := m.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3ConcentratorConfig) validateFskChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.FskChannel) { // not required
		return nil
	}

	if m.FskChannel != nil {
		if err := m.FskChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fsk_channel")
			}
			return err
		}
	}

	return nil
}

func (m *V3ConcentratorConfig) validateLbt(formats strfmt.Registry) error {

	if swag.IsZero(m.Lbt) { // not required
		return nil
	}

	if m.Lbt != nil {
		if err := m.Lbt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lbt")
			}
			return err
		}
	}

	return nil
}

func (m *V3ConcentratorConfig) validateLoraStandardChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.LoraStandardChannel) { // not required
		return nil
	}

	if m.LoraStandardChannel != nil {
		if err := m.LoraStandardChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lora_standard_channel")
			}
			return err
		}
	}

	return nil
}

func (m *V3ConcentratorConfig) validatePingSlot(formats strfmt.Registry) error {

	if swag.IsZero(m.PingSlot) { // not required
		return nil
	}

	if m.PingSlot != nil {
		if err := m.PingSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ping_slot")
			}
			return err
		}
	}

	return nil
}

func (m *V3ConcentratorConfig) validateRadios(formats strfmt.Registry) error {

	if swag.IsZero(m.Radios) { // not required
		return nil
	}

	for i := 0; i < len(m.Radios); i++ {
		if swag.IsZero(m.Radios[i]) { // not required
			continue
		}

		if m.Radios[i] != nil {
			if err := m.Radios[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("radios" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ConcentratorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ConcentratorConfig) UnmarshalBinary(b []byte) error {
	var res V3ConcentratorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
