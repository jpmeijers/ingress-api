// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V3PowerState Power state of the device.
//
// swagger:model v3PowerState
type V3PowerState string

const (

	// V3PowerStatePOWERUNKNOWN captures enum value "POWER_UNKNOWN"
	V3PowerStatePOWERUNKNOWN V3PowerState = "POWER_UNKNOWN"

	// V3PowerStatePOWERBATTERY captures enum value "POWER_BATTERY"
	V3PowerStatePOWERBATTERY V3PowerState = "POWER_BATTERY"

	// V3PowerStatePOWEREXTERNAL captures enum value "POWER_EXTERNAL"
	V3PowerStatePOWEREXTERNAL V3PowerState = "POWER_EXTERNAL"
)

// for schema
var v3PowerStateEnum []interface{}

func init() {
	var res []V3PowerState
	if err := json.Unmarshal([]byte(`["POWER_UNKNOWN","POWER_BATTERY","POWER_EXTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3PowerStateEnum = append(v3PowerStateEnum, v)
	}
}

func (m V3PowerState) validateV3PowerStateEnum(path, location string, value V3PowerState) error {
	if err := validate.Enum(path, location, value, v3PowerStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v3 power state
func (m V3PowerState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV3PowerStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
