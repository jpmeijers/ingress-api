// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V3PayloadFormatter  - FORMATTER_NONE: No payload formatter to work with raw payload only.
//  - FORMATTER_REPOSITORY: Use payload formatter for the end device type from a repository.
//  - FORMATTER_GRPC_SERVICE: gRPC service payload formatter. The parameter is the host:port of the service.
//  - FORMATTER_JAVASCRIPT: Custom payload formatter that executes Javascript code. The parameter is a JavaScript filename.
//  - FORMATTER_CAYENNELPP: CayenneLPP payload formatter.
//
// swagger:model v3PayloadFormatter
type V3PayloadFormatter string

const (

	// V3PayloadFormatterFORMATTERNONE captures enum value "FORMATTER_NONE"
	V3PayloadFormatterFORMATTERNONE V3PayloadFormatter = "FORMATTER_NONE"

	// V3PayloadFormatterFORMATTERREPOSITORY captures enum value "FORMATTER_REPOSITORY"
	V3PayloadFormatterFORMATTERREPOSITORY V3PayloadFormatter = "FORMATTER_REPOSITORY"

	// V3PayloadFormatterFORMATTERGRPCSERVICE captures enum value "FORMATTER_GRPC_SERVICE"
	V3PayloadFormatterFORMATTERGRPCSERVICE V3PayloadFormatter = "FORMATTER_GRPC_SERVICE"

	// V3PayloadFormatterFORMATTERJAVASCRIPT captures enum value "FORMATTER_JAVASCRIPT"
	V3PayloadFormatterFORMATTERJAVASCRIPT V3PayloadFormatter = "FORMATTER_JAVASCRIPT"

	// V3PayloadFormatterFORMATTERCAYENNELPP captures enum value "FORMATTER_CAYENNELPP"
	V3PayloadFormatterFORMATTERCAYENNELPP V3PayloadFormatter = "FORMATTER_CAYENNELPP"
)

// for schema
var v3PayloadFormatterEnum []interface{}

func init() {
	var res []V3PayloadFormatter
	if err := json.Unmarshal([]byte(`["FORMATTER_NONE","FORMATTER_REPOSITORY","FORMATTER_GRPC_SERVICE","FORMATTER_JAVASCRIPT","FORMATTER_CAYENNELPP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3PayloadFormatterEnum = append(v3PayloadFormatterEnum, v)
	}
}

func (m V3PayloadFormatter) validateV3PayloadFormatterEnum(path, location string, value V3PayloadFormatter) error {
	if err := validate.Enum(path, location, value, v3PayloadFormatterEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v3 payload formatter
func (m V3PayloadFormatter) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV3PayloadFormatterEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
