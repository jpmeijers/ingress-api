// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3ApplicationLink v3 application link
//
// swagger:model v3ApplicationLink
type V3ApplicationLink struct {

	// api key
	APIKey string `json:"api_key,omitempty"`

	// default formatters
	DefaultFormatters *V3MessagePayloadFormatters `json:"default_formatters,omitempty"`

	// The address of the external Network Server where to link to.
	// The typical format of the address is "host:port". If the port is omitted,
	// the normal port inference (with DNS lookup, otherwise defaults) is used.
	// Leave empty when linking to a cluster Network Server.
	NetworkServerAddress string `json:"network_server_address,omitempty"`

	// Enable TLS for linking to the external Network Server.
	// For cluster-local Network Servers, the cluster's TLS setting is used.
	TLS bool `json:"tls,omitempty"`
}

// Validate validates this v3 application link
func (m *V3ApplicationLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultFormatters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ApplicationLink) validateDefaultFormatters(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultFormatters) { // not required
		return nil
	}

	if m.DefaultFormatters != nil {
		if err := m.DefaultFormatters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_formatters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ApplicationLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ApplicationLink) UnmarshalBinary(b []byte) error {
	var res V3ApplicationLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
