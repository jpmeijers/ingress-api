// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3ApplicationJoinAccept v3 application join accept
//
// swagger:model v3ApplicationJoinAccept
type V3ApplicationJoinAccept struct {

	// Encrypted Application Session Key (if Join Server sent it to Network Server).
	AppsKey *V3KeyEnvelope `json:"app_s_key,omitempty"`

	// Downlink messages in the queue that got invalidated because of the session change.
	InvalidatedDownlinks []*V3ApplicationDownlink `json:"invalidated_downlinks"`

	// Indicates whether the security context refers to the pending session, i.e. when this join-accept is an answer to a
	// rejoin-request.
	PendingSession bool `json:"pending_session,omitempty"`

	// Server time when the Network Server received the message.
	// Format: date-time
	ReceivedAt strfmt.DateTime `json:"received_at,omitempty"`

	// Join Server issued identifier for the session keys negotiated in this join.
	// Format: byte
	SessionKeyID strfmt.Base64 `json:"session_key_id,omitempty"`
}

// Validate validates this v3 application join accept
func (m *V3ApplicationJoinAccept) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppsKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvalidatedDownlinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ApplicationJoinAccept) validateAppsKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AppsKey) { // not required
		return nil
	}

	if m.AppsKey != nil {
		if err := m.AppsKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_s_key")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationJoinAccept) validateInvalidatedDownlinks(formats strfmt.Registry) error {

	if swag.IsZero(m.InvalidatedDownlinks) { // not required
		return nil
	}

	for i := 0; i < len(m.InvalidatedDownlinks); i++ {
		if swag.IsZero(m.InvalidatedDownlinks[i]) { // not required
			continue
		}

		if m.InvalidatedDownlinks[i] != nil {
			if err := m.InvalidatedDownlinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalidated_downlinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3ApplicationJoinAccept) validateReceivedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("received_at", "body", "date-time", m.ReceivedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ApplicationJoinAccept) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ApplicationJoinAccept) UnmarshalBinary(b []byte) error {
	var res V3ApplicationJoinAccept
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
