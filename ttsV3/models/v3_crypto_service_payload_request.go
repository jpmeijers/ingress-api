// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3CryptoServicePayloadRequest v3 crypto service payload request
//
// swagger:model v3CryptoServicePayloadRequest
type V3CryptoServicePayloadRequest struct {

	// ids
	Ids *V3EndDeviceIdentifiers `json:"ids,omitempty"`

	// lorawan version
	LorawanVersion V3MACVersion `json:"lorawan_version,omitempty"`

	// payload
	// Format: byte
	Payload strfmt.Base64 `json:"payload,omitempty"`

	// provisioner id
	ProvisionerID string `json:"provisioner_id,omitempty"`

	// provisioning data
	ProvisioningData interface{} `json:"provisioning_data,omitempty"`
}

// Validate validates this v3 crypto service payload request
func (m *V3CryptoServicePayloadRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLorawanVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3CryptoServicePayloadRequest) validateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if m.Ids != nil {
		if err := m.Ids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ids")
			}
			return err
		}
	}

	return nil
}

func (m *V3CryptoServicePayloadRequest) validateLorawanVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.LorawanVersion) { // not required
		return nil
	}

	if err := m.LorawanVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lorawan_version")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3CryptoServicePayloadRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3CryptoServicePayloadRequest) UnmarshalBinary(b []byte) error {
	var res V3CryptoServicePayloadRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
