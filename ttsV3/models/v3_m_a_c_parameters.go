// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3MACParameters MACParameters represent the parameters of the device's MAC layer (active or desired).
// This is used internally by the Network Server.
//
// swagger:model v3MACParameters
type V3MACParameters struct {

	// ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate.
	// This field is deprecated, use adr_ack_delay_exponent instead.
	AdrAckDelay int64 `json:"adr_ack_delay,omitempty"`

	// ADR: number of messages to wait after setting ADRAckReq and before changing TxPower or DataRate.
	AdrAckDelayExponent *V3ADRAckDelayExponentValue `json:"adr_ack_delay_exponent,omitempty"`

	// ADR: number of messages to wait before setting ADRAckReq.
	// This field is deprecated, use adr_ack_limit_exponent instead.
	AdrAckLimit int64 `json:"adr_ack_limit,omitempty"`

	// ADR: number of messages to wait before setting ADRAckReq.
	AdrAckLimitExponent *V3ADRAckLimitExponentValue `json:"adr_ack_limit_exponent,omitempty"`

	// ADR: data rate index to use.
	AdrDataRateIndex V3DataRateIndex `json:"adr_data_rate_index,omitempty"`

	// ADR: number of retransmissions.
	AdrNbTrans int64 `json:"adr_nb_trans,omitempty"`

	// ADR: transmission power index to use.
	AdrTxPowerIndex int64 `json:"adr_tx_power_index,omitempty"`

	// Frequency of the class B beacon (Hz).
	BeaconFrequency string `json:"beacon_frequency,omitempty"`

	// Configured uplink channels and optionally Rx1 frequency.
	Channels []*V3MACParametersChannel `json:"channels"`

	// Whether downlink dwell time is set (400ms).
	// If this field is not set, then the value is either unknown or irrelevant(Network Server cannot modify it).
	DownlinkDwellTime bool `json:"downlink_dwell_time,omitempty"`

	// Maximum uplink duty cycle (of all channels).
	MaxDutyCycle V3AggregatedDutyCycle `json:"max_duty_cycle,omitempty"`

	// Maximum EIRP (dBm).
	MaxEirp float32 `json:"max_eirp,omitempty"`

	// Data rate index of the class B ping slot.
	// This field is deprecated, use ping_slot_data_rate_index_value instead.
	PingSlotDataRateIndex V3DataRateIndex `json:"ping_slot_data_rate_index,omitempty"`

	// Data rate index of the class B ping slot.
	PingSlotDataRateIndexValue *V3DataRateIndexValue `json:"ping_slot_data_rate_index_value,omitempty"`

	// Frequency of the class B ping slot (Hz).
	PingSlotFrequency string `json:"ping_slot_frequency,omitempty"`

	// Message count within which a rejoin-request must be sent.
	RejoinCountPeriodicity V3RejoinCountExponent `json:"rejoin_count_periodicity,omitempty"`

	// Time within which a rejoin-request must be sent.
	RejoinTimePeriodicity V3RejoinTimeExponent `json:"rejoin_time_periodicity,omitempty"`

	// Data rate offset for Rx1.
	Rx1DataRateOffset int64 `json:"rx1_data_rate_offset,omitempty"`

	// Rx1 delay (Rx2 delay is Rx1 delay + 1 second).
	Rx1Delay V3RxDelay `json:"rx1_delay,omitempty"`

	// Data rate index for Rx2.
	Rx2DataRateIndex V3DataRateIndex `json:"rx2_data_rate_index,omitempty"`

	// Frequency for Rx2 (Hz).
	Rx2Frequency string `json:"rx2_frequency,omitempty"`

	// Whether uplink dwell time is set (400ms).
	// If this field is not set, then the value is either unknown or irrelevant(Network Server cannot modify it).
	UplinkDwellTime bool `json:"uplink_dwell_time,omitempty"`
}

// Validate validates this v3 m a c parameters
func (m *V3MACParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdrAckDelayExponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdrAckLimitExponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdrDataRateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxDutyCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingSlotDataRateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingSlotDataRateIndexValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejoinCountPeriodicity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejoinTimePeriodicity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRx1Delay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRx2DataRateIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3MACParameters) validateAdrAckDelayExponent(formats strfmt.Registry) error {

	if swag.IsZero(m.AdrAckDelayExponent) { // not required
		return nil
	}

	if m.AdrAckDelayExponent != nil {
		if err := m.AdrAckDelayExponent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adr_ack_delay_exponent")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACParameters) validateAdrAckLimitExponent(formats strfmt.Registry) error {

	if swag.IsZero(m.AdrAckLimitExponent) { // not required
		return nil
	}

	if m.AdrAckLimitExponent != nil {
		if err := m.AdrAckLimitExponent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adr_ack_limit_exponent")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACParameters) validateAdrDataRateIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.AdrDataRateIndex) { // not required
		return nil
	}

	if err := m.AdrDataRateIndex.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("adr_data_rate_index")
		}
		return err
	}

	return nil
}

func (m *V3MACParameters) validateChannels(formats strfmt.Registry) error {

	if swag.IsZero(m.Channels) { // not required
		return nil
	}

	for i := 0; i < len(m.Channels); i++ {
		if swag.IsZero(m.Channels[i]) { // not required
			continue
		}

		if m.Channels[i] != nil {
			if err := m.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3MACParameters) validateMaxDutyCycle(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxDutyCycle) { // not required
		return nil
	}

	if err := m.MaxDutyCycle.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_duty_cycle")
		}
		return err
	}

	return nil
}

func (m *V3MACParameters) validatePingSlotDataRateIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.PingSlotDataRateIndex) { // not required
		return nil
	}

	if err := m.PingSlotDataRateIndex.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ping_slot_data_rate_index")
		}
		return err
	}

	return nil
}

func (m *V3MACParameters) validatePingSlotDataRateIndexValue(formats strfmt.Registry) error {

	if swag.IsZero(m.PingSlotDataRateIndexValue) { // not required
		return nil
	}

	if m.PingSlotDataRateIndexValue != nil {
		if err := m.PingSlotDataRateIndexValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ping_slot_data_rate_index_value")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACParameters) validateRejoinCountPeriodicity(formats strfmt.Registry) error {

	if swag.IsZero(m.RejoinCountPeriodicity) { // not required
		return nil
	}

	if err := m.RejoinCountPeriodicity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rejoin_count_periodicity")
		}
		return err
	}

	return nil
}

func (m *V3MACParameters) validateRejoinTimePeriodicity(formats strfmt.Registry) error {

	if swag.IsZero(m.RejoinTimePeriodicity) { // not required
		return nil
	}

	if err := m.RejoinTimePeriodicity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rejoin_time_periodicity")
		}
		return err
	}

	return nil
}

func (m *V3MACParameters) validateRx1Delay(formats strfmt.Registry) error {

	if swag.IsZero(m.Rx1Delay) { // not required
		return nil
	}

	if err := m.Rx1Delay.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rx1_delay")
		}
		return err
	}

	return nil
}

func (m *V3MACParameters) validateRx2DataRateIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.Rx2DataRateIndex) { // not required
		return nil
	}

	if err := m.Rx2DataRateIndex.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rx2_data_rate_index")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3MACParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3MACParameters) UnmarshalBinary(b []byte) error {
	var res V3MACParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
