// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3GatewayConnectionStats Connection stats as monitored by the Gateway Server.
//
// swagger:model v3GatewayConnectionStats
type V3GatewayConnectionStats struct {

	// connected at
	// Format: date-time
	ConnectedAt strfmt.DateTime `json:"connected_at,omitempty"`

	// downlink count
	DownlinkCount string `json:"downlink_count,omitempty"`

	// last downlink received at
	// Format: date-time
	LastDownlinkReceivedAt strfmt.DateTime `json:"last_downlink_received_at,omitempty"`

	// last status
	LastStatus *V3GatewayStatus `json:"last_status,omitempty"`

	// last status received at
	// Format: date-time
	LastStatusReceivedAt strfmt.DateTime `json:"last_status_received_at,omitempty"`

	// last uplink received at
	// Format: date-time
	LastUplinkReceivedAt strfmt.DateTime `json:"last_uplink_received_at,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// round trip times
	RoundTripTimes *GatewayConnectionStatsRoundTripTimes `json:"round_trip_times,omitempty"`

	// uplink count
	UplinkCount string `json:"uplink_count,omitempty"`
}

// Validate validates this v3 gateway connection stats
func (m *V3GatewayConnectionStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDownlinkReceivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastStatusReceivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUplinkReceivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundTripTimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3GatewayConnectionStats) validateConnectedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("connected_at", "body", "date-time", m.ConnectedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3GatewayConnectionStats) validateLastDownlinkReceivedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastDownlinkReceivedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_downlink_received_at", "body", "date-time", m.LastDownlinkReceivedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3GatewayConnectionStats) validateLastStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.LastStatus) { // not required
		return nil
	}

	if m.LastStatus != nil {
		if err := m.LastStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_status")
			}
			return err
		}
	}

	return nil
}

func (m *V3GatewayConnectionStats) validateLastStatusReceivedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastStatusReceivedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_status_received_at", "body", "date-time", m.LastStatusReceivedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3GatewayConnectionStats) validateLastUplinkReceivedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUplinkReceivedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_uplink_received_at", "body", "date-time", m.LastUplinkReceivedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3GatewayConnectionStats) validateRoundTripTimes(formats strfmt.Registry) error {

	if swag.IsZero(m.RoundTripTimes) { // not required
		return nil
	}

	if m.RoundTripTimes != nil {
		if err := m.RoundTripTimes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("round_trip_times")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3GatewayConnectionStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3GatewayConnectionStats) UnmarshalBinary(b []byte) error {
	var res V3GatewayConnectionStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
