// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationDownlinkClassBC application downlink class b c
//
// swagger:model ApplicationDownlinkClassBC
type ApplicationDownlinkClassBC struct {

	// Absolute time when the downlink message should be transmitted.
	// This requires the gateway to have GPS time synchronization.
	// If the time is in the past or if there is a scheduling conflict, the downlink message fails.
	// If null, the time is selected based on slot availability. This is recommended in class B mode.
	// Format: date-time
	AbsoluteTime strfmt.DateTime `json:"absolute_time,omitempty"`

	// Possible gateway identifiers and antenna index to use for this downlink message.
	// The Network Server selects one of these gateways for downlink, based on connectivity, signal quality, channel utilization and an available slot.
	// If none of the gateways can be selected, the downlink message fails.
	// If empty, a gateway and antenna is selected automatically from the gateways seen in recent uplinks.
	Gateways []*V3GatewayAntennaIdentifiers `json:"gateways"`
}

// Validate validates this application downlink class b c
func (m *ApplicationDownlinkClassBC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbsoluteTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateways(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationDownlinkClassBC) validateAbsoluteTime(formats strfmt.Registry) error {

	if swag.IsZero(m.AbsoluteTime) { // not required
		return nil
	}

	if err := validate.FormatOf("absolute_time", "body", "date-time", m.AbsoluteTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationDownlinkClassBC) validateGateways(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateways) { // not required
		return nil
	}

	for i := 0; i < len(m.Gateways); i++ {
		if swag.IsZero(m.Gateways[i]) { // not required
			continue
		}

		if m.Gateways[i] != nil {
			if err := m.Gateways[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gateways" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationDownlinkClassBC) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationDownlinkClassBC) UnmarshalBinary(b []byte) error {
	var res ApplicationDownlinkClassBC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
