// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3ErrorDetails Error details that are communicated over gRPC (and HTTP) APIs.
// The messages (for translation) are stored as "error:<namespace>:<name>".
//
// swagger:model v3ErrorDetails
type V3ErrorDetails struct {

	// Attributes that should be filled into the message format. Any extra attributes
	// can be displayed as error details.
	Attributes interface{} `json:"attributes,omitempty"`

	// The error that caused this error.
	Cause *V3ErrorDetails `json:"cause,omitempty"`

	// The status code of the error.
	Code int64 `json:"code,omitempty"`

	// The correlation ID of the error can be used to correlate the error to stack
	// traces the network may (or may not) store about recent errors.
	CorrelationID string `json:"correlation_id,omitempty"`

	// The details of the error.
	Details []*ProtobufAny `json:"details"`

	// The default (fallback) message format that should be used for the error.
	// This is also used if the client does not have a translation for the error.
	MessageFormat string `json:"message_format,omitempty"`

	// Name of the error.
	Name string `json:"name,omitempty"`

	// Namespace of the error (typically the package name in The Things Stack).
	Namespace string `json:"namespace,omitempty"`
}

// Validate validates this v3 error details
func (m *V3ErrorDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ErrorDetails) validateCause(formats strfmt.Registry) error {

	if swag.IsZero(m.Cause) { // not required
		return nil
	}

	if m.Cause != nil {
		if err := m.Cause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cause")
			}
			return err
		}
	}

	return nil
}

func (m *V3ErrorDetails) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ErrorDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ErrorDetails) UnmarshalBinary(b []byte) error {
	var res V3ErrorDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
