// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MACCommandNewChannelReq m a c command new channel req
//
// swagger:model MACCommandNewChannelReq
type MACCommandNewChannelReq struct {

	// channel index
	ChannelIndex int64 `json:"channel_index,omitempty"`

	// frequency
	Frequency string `json:"frequency,omitempty"`

	// max data rate index
	MaxDataRateIndex V3DataRateIndex `json:"max_data_rate_index,omitempty"`

	// min data rate index
	MinDataRateIndex V3DataRateIndex `json:"min_data_rate_index,omitempty"`
}

// Validate validates this m a c command new channel req
func (m *MACCommandNewChannelReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxDataRateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinDataRateIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MACCommandNewChannelReq) validateMaxDataRateIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxDataRateIndex) { // not required
		return nil
	}

	if err := m.MaxDataRateIndex.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_data_rate_index")
		}
		return err
	}

	return nil
}

func (m *MACCommandNewChannelReq) validateMinDataRateIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.MinDataRateIndex) { // not required
		return nil
	}

	if err := m.MinDataRateIndex.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("min_data_rate_index")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MACCommandNewChannelReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MACCommandNewChannelReq) UnmarshalBinary(b []byte) error {
	var res MACCommandNewChannelReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
