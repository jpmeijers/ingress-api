// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3MessagePayloadFormatters v3 message payload formatters
//
// swagger:model v3MessagePayloadFormatters
type V3MessagePayloadFormatters struct {

	// Payload formatter for downlink messages, must be set together with its parameter.
	DownFormatter V3PayloadFormatter `json:"down_formatter,omitempty"`

	// Parameter for the down_formatter, must be set together.
	DownFormatterParameter string `json:"down_formatter_parameter,omitempty"`

	// Payload formatter for uplink messages, must be set together with its parameter.
	UpFormatter V3PayloadFormatter `json:"up_formatter,omitempty"`

	// Parameter for the up_formatter, must be set together.
	UpFormatterParameter string `json:"up_formatter_parameter,omitempty"`
}

// Validate validates this v3 message payload formatters
func (m *V3MessagePayloadFormatters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpFormatter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3MessagePayloadFormatters) validateDownFormatter(formats strfmt.Registry) error {

	if swag.IsZero(m.DownFormatter) { // not required
		return nil
	}

	if err := m.DownFormatter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("down_formatter")
		}
		return err
	}

	return nil
}

func (m *V3MessagePayloadFormatters) validateUpFormatter(formats strfmt.Registry) error {

	if swag.IsZero(m.UpFormatter) { // not required
		return nil
	}

	if err := m.UpFormatter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("up_formatter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3MessagePayloadFormatters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3MessagePayloadFormatters) UnmarshalBinary(b []byte) error {
	var res V3MessagePayloadFormatters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
