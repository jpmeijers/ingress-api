// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3ApplicationUplink v3 application uplink
//
// swagger:model v3ApplicationUplink
type V3ApplicationUplink struct {

	// The AppSKey of the current session.
	// This field is only present if the skip_payload_crypto field of the EndDevice
	// is true.
	// Can be used to decrypt uplink payloads and encrypt downlink payloads.
	AppsKey *V3KeyEnvelope `json:"app_s_key,omitempty"`

	// decoded payload
	DecodedPayload interface{} `json:"decoded_payload,omitempty"`

	// f cnt
	FCnt int64 `json:"f_cnt,omitempty"`

	// f port
	FPort int64 `json:"f_port,omitempty"`

	// The frame payload of the uplink message.
	// The payload is still encrypted if the skip_payload_crypto field of the EndDevice
	// is true, which is indicated by the presence of the app_s_key field.
	// Format: byte
	FrmPayload strfmt.Base64 `json:"frm_payload,omitempty"`

	// The last AFCntDown of the current session.
	// This field is only present if the skip_payload_crypto field of the EndDevice
	// is true.
	// Can be used with app_s_key to encrypt downlink payloads.
	LastafCntDown int64 `json:"last_a_f_cnt_down,omitempty"`

	// Server time when the Network Server received the message.
	// Format: date-time
	ReceivedAt strfmt.DateTime `json:"received_at,omitempty"`

	// A list of metadata for each antenna of each gateway that received this message.
	RxMetadata []*V3RxMetadata `json:"rx_metadata"`

	// Join Server issued identifier for the session keys used by this uplink.
	// Format: byte
	SessionKeyID strfmt.Base64 `json:"session_key_id,omitempty"`

	// Settings for the transmission.
	Settings *V3TxSettings `json:"settings,omitempty"`
}

// Validate validates this v3 application uplink
func (m *V3ApplicationUplink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppsKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ApplicationUplink) validateAppsKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AppsKey) { // not required
		return nil
	}

	if m.AppsKey != nil {
		if err := m.AppsKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_s_key")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationUplink) validateReceivedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("received_at", "body", "date-time", m.ReceivedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3ApplicationUplink) validateRxMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.RxMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.RxMetadata); i++ {
		if swag.IsZero(m.RxMetadata[i]) { // not required
			continue
		}

		if m.RxMetadata[i] != nil {
			if err := m.RxMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rx_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3ApplicationUplink) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ApplicationUplink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ApplicationUplink) UnmarshalBinary(b []byte) error {
	var res V3ApplicationUplink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
