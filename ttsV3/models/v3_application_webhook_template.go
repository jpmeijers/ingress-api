// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3ApplicationWebhookTemplate v3 application webhook template
//
// swagger:model v3ApplicationWebhookTemplate
type V3ApplicationWebhookTemplate struct {

	// The base URL of the template. Can contain template fields, in RFC 6570 format.
	BaseURL string `json:"base_url,omitempty"`

	// Control the creation of the downlink queue operations API key.
	CreateDownlinkAPIKey bool `json:"create_downlink_api_key,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// documentation url
	DocumentationURL string `json:"documentation_url,omitempty"`

	// downlink ack
	DownlinkAck *V3ApplicationWebhookTemplateMessage `json:"downlink_ack,omitempty"`

	// downlink failed
	DownlinkFailed *V3ApplicationWebhookTemplateMessage `json:"downlink_failed,omitempty"`

	// downlink nack
	DownlinkNack *V3ApplicationWebhookTemplateMessage `json:"downlink_nack,omitempty"`

	// downlink queued
	DownlinkQueued *V3ApplicationWebhookTemplateMessage `json:"downlink_queued,omitempty"`

	// downlink sent
	DownlinkSent *V3ApplicationWebhookTemplateMessage `json:"downlink_sent,omitempty"`

	// fields
	Fields []*V3ApplicationWebhookTemplateField `json:"fields"`

	// format
	Format string `json:"format,omitempty"`

	// The HTTP headers used by the template. Both the key and the value can contain template fields.
	Headers map[string]string `json:"headers,omitempty"`

	// ids
	Ids *V3ApplicationWebhookTemplateIdentifiers `json:"ids,omitempty"`

	// info url
	InfoURL string `json:"info_url,omitempty"`

	// join accept
	JoinAccept *V3ApplicationWebhookTemplateMessage `json:"join_accept,omitempty"`

	// location solved
	LocationSolved *V3ApplicationWebhookTemplateMessage `json:"location_solved,omitempty"`

	// logo url
	LogoURL string `json:"logo_url,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// uplink message
	UplinkMessage *V3ApplicationWebhookTemplateMessage `json:"uplink_message,omitempty"`
}

// Validate validates this v3 application webhook template
func (m *V3ApplicationWebhookTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownlinkAck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkNack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkQueued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinAccept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationSolved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplinkMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ApplicationWebhookTemplate) validateDownlinkAck(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkAck) { // not required
		return nil
	}

	if m.DownlinkAck != nil {
		if err := m.DownlinkAck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_ack")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateDownlinkFailed(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkFailed) { // not required
		return nil
	}

	if m.DownlinkFailed != nil {
		if err := m.DownlinkFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_failed")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateDownlinkNack(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkNack) { // not required
		return nil
	}

	if m.DownlinkNack != nil {
		if err := m.DownlinkNack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_nack")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateDownlinkQueued(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkQueued) { // not required
		return nil
	}

	if m.DownlinkQueued != nil {
		if err := m.DownlinkQueued.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_queued")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateDownlinkSent(formats strfmt.Registry) error {

	if swag.IsZero(m.DownlinkSent) { // not required
		return nil
	}

	if m.DownlinkSent != nil {
		if err := m.DownlinkSent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink_sent")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if m.Ids != nil {
		if err := m.Ids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ids")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateJoinAccept(formats strfmt.Registry) error {

	if swag.IsZero(m.JoinAccept) { // not required
		return nil
	}

	if m.JoinAccept != nil {
		if err := m.JoinAccept.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("join_accept")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateLocationSolved(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationSolved) { // not required
		return nil
	}

	if m.LocationSolved != nil {
		if err := m.LocationSolved.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location_solved")
			}
			return err
		}
	}

	return nil
}

func (m *V3ApplicationWebhookTemplate) validateUplinkMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.UplinkMessage) { // not required
		return nil
	}

	if m.UplinkMessage != nil {
		if err := m.UplinkMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uplink_message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ApplicationWebhookTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ApplicationWebhookTemplate) UnmarshalBinary(b []byte) error {
	var res V3ApplicationWebhookTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
