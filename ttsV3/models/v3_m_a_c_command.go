// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3MACCommand v3 m a c command
//
// swagger:model v3MACCommand
type V3MACCommand struct {

	// adr param setup req
	AdrParamSetupReq *MACCommandADRParamSetupReq `json:"adr_param_setup_req,omitempty"`

	// beacon freq ans
	BeaconFreqAns *MACCommandBeaconFreqAns `json:"beacon_freq_ans,omitempty"`

	// beacon freq req
	BeaconFreqReq *MACCommandBeaconFreqReq `json:"beacon_freq_req,omitempty"`

	// beacon timing ans
	BeaconTimingAns *MACCommandBeaconTimingAns `json:"beacon_timing_ans,omitempty"`

	// cid
	Cid V3MACCommandIdentifier `json:"cid,omitempty"`

	// dev status ans
	DevStatusAns *MACCommandDevStatusAns `json:"dev_status_ans,omitempty"`

	// device mode conf
	DeviceModeConf *MACCommandDeviceModeConf `json:"device_mode_conf,omitempty"`

	// device mode ind
	DeviceModeInd *MACCommandDeviceModeInd `json:"device_mode_ind,omitempty"`

	// device time ans
	DeviceTimeAns *MACCommandDeviceTimeAns `json:"device_time_ans,omitempty"`

	// dl channel ans
	DlChannelAns *MACCommandDLChannelAns `json:"dl_channel_ans,omitempty"`

	// dl channel req
	DlChannelReq *MACCommandDLChannelReq `json:"dl_channel_req,omitempty"`

	// duty cycle req
	DutyCycleReq *MACCommandDutyCycleReq `json:"duty_cycle_req,omitempty"`

	// force rejoin req
	ForceRejoinReq *MACCommandForceRejoinReq `json:"force_rejoin_req,omitempty"`

	// link adr ans
	LinkAdrAns *MACCommandLinkADRAns `json:"link_adr_ans,omitempty"`

	// link adr req
	LinkAdrReq *MACCommandLinkADRReq `json:"link_adr_req,omitempty"`

	// link check ans
	LinkCheckAns *MACCommandLinkCheckAns `json:"link_check_ans,omitempty"`

	// new channel ans
	NewChannelAns *MACCommandNewChannelAns `json:"new_channel_ans,omitempty"`

	// new channel req
	NewChannelReq *MACCommandNewChannelReq `json:"new_channel_req,omitempty"`

	// ping slot channel ans
	PingSlotChannelAns *MACCommandPingSlotChannelAns `json:"ping_slot_channel_ans,omitempty"`

	// ping slot channel req
	PingSlotChannelReq *MACCommandPingSlotChannelReq `json:"ping_slot_channel_req,omitempty"`

	// ping slot info req
	PingSlotInfoReq *MACCommandPingSlotInfoReq `json:"ping_slot_info_req,omitempty"`

	// raw payload
	// Format: byte
	RawPayload strfmt.Base64 `json:"raw_payload,omitempty"`

	// rejoin param setup ans
	RejoinParamSetupAns *MACCommandRejoinParamSetupAns `json:"rejoin_param_setup_ans,omitempty"`

	// rejoin param setup req
	RejoinParamSetupReq *MACCommandRejoinParamSetupReq `json:"rejoin_param_setup_req,omitempty"`

	// rekey conf
	RekeyConf *MACCommandRekeyConf `json:"rekey_conf,omitempty"`

	// rekey ind
	RekeyInd *MACCommandRekeyInd `json:"rekey_ind,omitempty"`

	// reset conf
	ResetConf *MACCommandResetConf `json:"reset_conf,omitempty"`

	// reset ind
	ResetInd *MACCommandResetInd `json:"reset_ind,omitempty"`

	// rx param setup ans
	RxParamSetupAns *MACCommandRxParamSetupAns `json:"rx_param_setup_ans,omitempty"`

	// rx param setup req
	RxParamSetupReq *MACCommandRxParamSetupReq `json:"rx_param_setup_req,omitempty"`

	// rx timing setup req
	RxTimingSetupReq *MACCommandRxTimingSetupReq `json:"rx_timing_setup_req,omitempty"`

	// tx param setup req
	TxParamSetupReq *MACCommandTxParamSetupReq `json:"tx_param_setup_req,omitempty"`
}

// Validate validates this v3 m a c command
func (m *V3MACCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdrParamSetupReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeaconFreqAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeaconFreqReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeaconTimingAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevStatusAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceModeConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceModeInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceTimeAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlChannelAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlChannelReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDutyCycleReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceRejoinReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkAdrAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkAdrReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkCheckAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewChannelAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewChannelReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingSlotChannelAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingSlotChannelReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingSlotInfoReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejoinParamSetupAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejoinParamSetupReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRekeyConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRekeyInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxParamSetupAns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxParamSetupReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxTimingSetupReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxParamSetupReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3MACCommand) validateAdrParamSetupReq(formats strfmt.Registry) error {

	if swag.IsZero(m.AdrParamSetupReq) { // not required
		return nil
	}

	if m.AdrParamSetupReq != nil {
		if err := m.AdrParamSetupReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adr_param_setup_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateBeaconFreqAns(formats strfmt.Registry) error {

	if swag.IsZero(m.BeaconFreqAns) { // not required
		return nil
	}

	if m.BeaconFreqAns != nil {
		if err := m.BeaconFreqAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beacon_freq_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateBeaconFreqReq(formats strfmt.Registry) error {

	if swag.IsZero(m.BeaconFreqReq) { // not required
		return nil
	}

	if m.BeaconFreqReq != nil {
		if err := m.BeaconFreqReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beacon_freq_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateBeaconTimingAns(formats strfmt.Registry) error {

	if swag.IsZero(m.BeaconTimingAns) { // not required
		return nil
	}

	if m.BeaconTimingAns != nil {
		if err := m.BeaconTimingAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beacon_timing_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateCid(formats strfmt.Registry) error {

	if swag.IsZero(m.Cid) { // not required
		return nil
	}

	if err := m.Cid.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cid")
		}
		return err
	}

	return nil
}

func (m *V3MACCommand) validateDevStatusAns(formats strfmt.Registry) error {

	if swag.IsZero(m.DevStatusAns) { // not required
		return nil
	}

	if m.DevStatusAns != nil {
		if err := m.DevStatusAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dev_status_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateDeviceModeConf(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceModeConf) { // not required
		return nil
	}

	if m.DeviceModeConf != nil {
		if err := m.DeviceModeConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_mode_conf")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateDeviceModeInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceModeInd) { // not required
		return nil
	}

	if m.DeviceModeInd != nil {
		if err := m.DeviceModeInd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_mode_ind")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateDeviceTimeAns(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceTimeAns) { // not required
		return nil
	}

	if m.DeviceTimeAns != nil {
		if err := m.DeviceTimeAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_time_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateDlChannelAns(formats strfmt.Registry) error {

	if swag.IsZero(m.DlChannelAns) { // not required
		return nil
	}

	if m.DlChannelAns != nil {
		if err := m.DlChannelAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dl_channel_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateDlChannelReq(formats strfmt.Registry) error {

	if swag.IsZero(m.DlChannelReq) { // not required
		return nil
	}

	if m.DlChannelReq != nil {
		if err := m.DlChannelReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dl_channel_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateDutyCycleReq(formats strfmt.Registry) error {

	if swag.IsZero(m.DutyCycleReq) { // not required
		return nil
	}

	if m.DutyCycleReq != nil {
		if err := m.DutyCycleReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duty_cycle_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateForceRejoinReq(formats strfmt.Registry) error {

	if swag.IsZero(m.ForceRejoinReq) { // not required
		return nil
	}

	if m.ForceRejoinReq != nil {
		if err := m.ForceRejoinReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("force_rejoin_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateLinkAdrAns(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkAdrAns) { // not required
		return nil
	}

	if m.LinkAdrAns != nil {
		if err := m.LinkAdrAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link_adr_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateLinkAdrReq(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkAdrReq) { // not required
		return nil
	}

	if m.LinkAdrReq != nil {
		if err := m.LinkAdrReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link_adr_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateLinkCheckAns(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkCheckAns) { // not required
		return nil
	}

	if m.LinkCheckAns != nil {
		if err := m.LinkCheckAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link_check_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateNewChannelAns(formats strfmt.Registry) error {

	if swag.IsZero(m.NewChannelAns) { // not required
		return nil
	}

	if m.NewChannelAns != nil {
		if err := m.NewChannelAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_channel_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateNewChannelReq(formats strfmt.Registry) error {

	if swag.IsZero(m.NewChannelReq) { // not required
		return nil
	}

	if m.NewChannelReq != nil {
		if err := m.NewChannelReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_channel_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validatePingSlotChannelAns(formats strfmt.Registry) error {

	if swag.IsZero(m.PingSlotChannelAns) { // not required
		return nil
	}

	if m.PingSlotChannelAns != nil {
		if err := m.PingSlotChannelAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ping_slot_channel_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validatePingSlotChannelReq(formats strfmt.Registry) error {

	if swag.IsZero(m.PingSlotChannelReq) { // not required
		return nil
	}

	if m.PingSlotChannelReq != nil {
		if err := m.PingSlotChannelReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ping_slot_channel_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validatePingSlotInfoReq(formats strfmt.Registry) error {

	if swag.IsZero(m.PingSlotInfoReq) { // not required
		return nil
	}

	if m.PingSlotInfoReq != nil {
		if err := m.PingSlotInfoReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ping_slot_info_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateRejoinParamSetupAns(formats strfmt.Registry) error {

	if swag.IsZero(m.RejoinParamSetupAns) { // not required
		return nil
	}

	if m.RejoinParamSetupAns != nil {
		if err := m.RejoinParamSetupAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejoin_param_setup_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateRejoinParamSetupReq(formats strfmt.Registry) error {

	if swag.IsZero(m.RejoinParamSetupReq) { // not required
		return nil
	}

	if m.RejoinParamSetupReq != nil {
		if err := m.RejoinParamSetupReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejoin_param_setup_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateRekeyConf(formats strfmt.Registry) error {

	if swag.IsZero(m.RekeyConf) { // not required
		return nil
	}

	if m.RekeyConf != nil {
		if err := m.RekeyConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekey_conf")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateRekeyInd(formats strfmt.Registry) error {

	if swag.IsZero(m.RekeyInd) { // not required
		return nil
	}

	if m.RekeyInd != nil {
		if err := m.RekeyInd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekey_ind")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateResetConf(formats strfmt.Registry) error {

	if swag.IsZero(m.ResetConf) { // not required
		return nil
	}

	if m.ResetConf != nil {
		if err := m.ResetConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reset_conf")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateResetInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ResetInd) { // not required
		return nil
	}

	if m.ResetInd != nil {
		if err := m.ResetInd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reset_ind")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateRxParamSetupAns(formats strfmt.Registry) error {

	if swag.IsZero(m.RxParamSetupAns) { // not required
		return nil
	}

	if m.RxParamSetupAns != nil {
		if err := m.RxParamSetupAns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rx_param_setup_ans")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateRxParamSetupReq(formats strfmt.Registry) error {

	if swag.IsZero(m.RxParamSetupReq) { // not required
		return nil
	}

	if m.RxParamSetupReq != nil {
		if err := m.RxParamSetupReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rx_param_setup_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateRxTimingSetupReq(formats strfmt.Registry) error {

	if swag.IsZero(m.RxTimingSetupReq) { // not required
		return nil
	}

	if m.RxTimingSetupReq != nil {
		if err := m.RxTimingSetupReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rx_timing_setup_req")
			}
			return err
		}
	}

	return nil
}

func (m *V3MACCommand) validateTxParamSetupReq(formats strfmt.Registry) error {

	if swag.IsZero(m.TxParamSetupReq) { // not required
		return nil
	}

	if m.TxParamSetupReq != nil {
		if err := m.TxParamSetupReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx_param_setup_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3MACCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3MACCommand) UnmarshalBinary(b []byte) error {
	var res V3MACCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
