// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationPubSubMQTTProvider The MQTT provider settings.
//
// swagger:model ApplicationPubSubMQTTProvider
type ApplicationPubSubMQTTProvider struct {

	// client id
	ClientID string `json:"client_id,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// publish qos
	PublishQos MQTTProviderQoS `json:"publish_qos,omitempty"`

	// server url
	ServerURL string `json:"server_url,omitempty"`

	// subscribe qos
	SubscribeQos MQTTProviderQoS `json:"subscribe_qos,omitempty"`

	// The server Root CA certificate. PEM formatted.
	// Format: byte
	TLSCa strfmt.Base64 `json:"tls_ca,omitempty"`

	// The client certificate. PEM formatted.
	// Format: byte
	TLSClientCert strfmt.Base64 `json:"tls_client_cert,omitempty"`

	// The client private key. PEM formatted.
	// Format: byte
	TLSClientKey strfmt.Base64 `json:"tls_client_key,omitempty"`

	// use tls
	UseTLS bool `json:"use_tls,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this application pub sub m q t t provider
func (m *ApplicationPubSubMQTTProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublishQos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribeQos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationPubSubMQTTProvider) validatePublishQos(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishQos) { // not required
		return nil
	}

	if err := m.PublishQos.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("publish_qos")
		}
		return err
	}

	return nil
}

func (m *ApplicationPubSubMQTTProvider) validateSubscribeQos(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscribeQos) { // not required
		return nil
	}

	if err := m.SubscribeQos.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subscribe_qos")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationPubSubMQTTProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationPubSubMQTTProvider) UnmarshalBinary(b []byte) error {
	var res ApplicationPubSubMQTTProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
