// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3TxSettings TxSettings contains the settings for a transmission.
// This message is used on both uplink and downlink.
// On downlink, this is a scheduled transmission.
//
// swagger:model v3TxSettings
type V3TxSettings struct {

	// LoRa coding rate.
	CodingRate string `json:"coding_rate,omitempty"`

	// Data rate.
	DataRate *V3DataRate `json:"data_rate,omitempty"`

	// LoRaWAN data rate index. JPM: Changed to integer.
	DataRateIndex int64 `json:"data_rate_index,omitempty"`

	// Transmission settings for downlink.
	Downlink *TxSettingsDownlink `json:"downlink,omitempty"`

	// Send a CRC in the packet; only on uplink; on downlink, CRC should not be enabled.
	EnableCrc bool `json:"enable_crc,omitempty"`

	// Frequency (Hz).
	Frequency string `json:"frequency,omitempty"`

	// Time of the gateway when the uplink message was received, or when the downlink message should be transmitted.
	// For downlink, this requires the gateway to have GPS time synchronization.
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// Timestamp of the gateway concentrator when the uplink message was received, or when the downlink message should be transmitted (microseconds).
	// On downlink, set timestamp to 0 and time to null to use immediate scheduling.
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this v3 tx settings
func (m *V3TxSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3TxSettings) validateDataRate(formats strfmt.Registry) error {

	if swag.IsZero(m.DataRate) { // not required
		return nil
	}

	if m.DataRate != nil {
		if err := m.DataRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_rate")
			}
			return err
		}
	}

	return nil
}

func (m *V3TxSettings) validateDownlink(formats strfmt.Registry) error {

	if swag.IsZero(m.Downlink) { // not required
		return nil
	}

	if m.Downlink != nil {
		if err := m.Downlink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downlink")
			}
			return err
		}
	}

	return nil
}

func (m *V3TxSettings) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3TxSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3TxSettings) UnmarshalBinary(b []byte) error {
	var res V3TxSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
