// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3User User is the message that defines an user on the network.
//
// swagger:model v3User
type V3User struct {

	// This user is an admin.
	// This field can only be modified by other admins.
	Admin bool `json:"admin,omitempty"`

	// attributes
	Attributes map[string]string `json:"attributes,omitempty"`

	// contact info
	ContactInfo []*V3ContactInfo `json:"contact_info"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ids
	Ids *V3UserIdentifiers `json:"ids,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Only used on create; never returned on API calls.
	Password string `json:"password,omitempty"`

	// password updated at
	// Format: date-time
	PasswordUpdatedAt strfmt.DateTime `json:"password_updated_at,omitempty"`

	// Primary email address that can be used for logging in.
	// This address is not public, use contact_info for that.
	PrimaryEmailAddress string `json:"primary_email_address,omitempty"`

	// primary email address validated at
	// Format: date-time
	PrimaryEmailAddressValidatedAt strfmt.DateTime `json:"primary_email_address_validated_at,omitempty"`

	// profile picture
	ProfilePicture *V3Picture `json:"profile_picture,omitempty"`

	// require password update
	RequirePasswordUpdate bool `json:"require_password_update,omitempty"`

	// The reviewing state of the user.
	// This field can only be modified by admins.
	State V3State `json:"state,omitempty"`

	// The temporary password can only be used to update a user's password; never returned on API calls.
	TemporaryPassword string `json:"temporary_password,omitempty"`

	// temporary password created at
	// Format: date-time
	TemporaryPasswordCreatedAt strfmt.DateTime `json:"temporary_password_created_at,omitempty"`

	// temporary password expires at
	// Format: date-time
	TemporaryPasswordExpiresAt strfmt.DateTime `json:"temporary_password_expires_at,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this v3 user
func (m *V3User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryEmailAddressValidatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfilePicture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemporaryPasswordCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemporaryPasswordExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3User) validateContactInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ContactInfo); i++ {
		if swag.IsZero(m.ContactInfo[i]) { // not required
			continue
		}

		if m.ContactInfo[i] != nil {
			if err := m.ContactInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contact_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3User) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3User) validateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if m.Ids != nil {
		if err := m.Ids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ids")
			}
			return err
		}
	}

	return nil
}

func (m *V3User) validatePasswordUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("password_updated_at", "body", "date-time", m.PasswordUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3User) validatePrimaryEmailAddressValidatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryEmailAddressValidatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("primary_email_address_validated_at", "body", "date-time", m.PrimaryEmailAddressValidatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3User) validateProfilePicture(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfilePicture) { // not required
		return nil
	}

	if m.ProfilePicture != nil {
		if err := m.ProfilePicture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile_picture")
			}
			return err
		}
	}

	return nil
}

func (m *V3User) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *V3User) validateTemporaryPasswordCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.TemporaryPasswordCreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("temporary_password_created_at", "body", "date-time", m.TemporaryPasswordCreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3User) validateTemporaryPasswordExpiresAt(formats strfmt.Registry) error {

	if swag.IsZero(m.TemporaryPasswordExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("temporary_password_expires_at", "body", "date-time", m.TemporaryPasswordExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3User) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3User) UnmarshalBinary(b []byte) error {
	var res V3User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
