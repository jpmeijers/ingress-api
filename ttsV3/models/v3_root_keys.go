// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3RootKeys Root keys for a LoRaWAN device.
// These are stored on the Join Server.
//
// swagger:model v3RootKeys
type V3RootKeys struct {

	// The (encrypted) Application Key.
	AppKey *V3KeyEnvelope `json:"app_key,omitempty"`

	// The (encrypted) Network Key.
	NwkKey *V3KeyEnvelope `json:"nwk_key,omitempty"`

	// Join Server issued identifier for the root keys.
	RootKeyID string `json:"root_key_id,omitempty"`
}

// Validate validates this v3 root keys
func (m *V3RootKeys) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNwkKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3RootKeys) validateAppKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AppKey) { // not required
		return nil
	}

	if m.AppKey != nil {
		if err := m.AppKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_key")
			}
			return err
		}
	}

	return nil
}

func (m *V3RootKeys) validateNwkKey(formats strfmt.Registry) error {

	if swag.IsZero(m.NwkKey) { // not required
		return nil
	}

	if m.NwkKey != nil {
		if err := m.NwkKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nwk_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3RootKeys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3RootKeys) UnmarshalBinary(b []byte) error {
	var res V3RootKeys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
